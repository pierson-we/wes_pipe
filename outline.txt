WES Analysis pipeline

fastq file
	QC fastq file (FastQC: https://www.bioinformatics.babraham.ac.uk/projects/fastqc/, FASTX-Toolkit: http://hannonlab.cshl.edu/fastx_toolkit/commandline.html)
		Align reads (Bowtie2)
			Possible additional steps
				Sort/Index (Picard) (allows indexing of data in bam file. must sort first - don't know what the benefit for variant calling is)
				*MarkDuplicatesWithMateCigar (Picard)
				*Indel Realignment - not required if using a haplotype assembly step (i.e.) mutect2(GATK)
				*Base Quality Score Recalibration (GATK, dbSNP: ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606/VCF/) https://software.broadinstitute.org/gatk/documentation/tooldocs/3.8-0/org_broadinstitute_gatk_tools_walkers_bqsr_BaseRecalibrator.php#--knownSites
			Variant Calling
				SNVs
					MuTect2 (defaults to using 4 threads for haplotypecaller)
						make sure germline resource is included.
					VarDict
					FreeBayes
						need to hack a filter to do paired somatic calling (https://github.com/ekg/freebayes/issues/107)
					VarScan
						need to convert .bam to pileup format (can pipe this data to VarScan, though) (http://varscan.sourceforge.net/somatic-calling.html)
				CNVs (Having normal samples will help correct for Exome capture biases)
					CNVkit
				InDels
					VarDict
					FreeBayes
					VarScan
						will need to postprocess varscan output (http://varscan.sourceforge.net/copy-number-calling.html)
					Scalpel
				Structural Variants
					LUMPY
					DELLY
					WHAM
			Variant filtering (method may vary for each variant caller, based on any filtering and annotation it performs by default)
				freebayes (https://wabi-wiki.scilifelab.se/display/SHGATG/Somatic+variant+calling+in+cancer and https://github.com/ekg/freebayes#calling-variants-from-fastq-to-vcf)
			Variant Recalibration (GATK)
			Annotate Variants (ANNOVAR)
			Merge VCFs (picard)
			MSI status (mSINGS for tumor-only, MANTIS for matched pairs. see more options here: http://ascopubs.org/doi/full/10.1200/PO.17.00189)
			
			
TODO

error handling (mainly incomplete file deletion)
defaults for threads/base_name/other variables
verbose mode
print stdout to log file
create quality check (against reference samples)
minimize saving duplicate files
chromoplexy
clean up all parameters (cfg vs. passed)
add /tmp folder option (will delete all intermediate files once analysis is complete)
add scratch path
possibility of streaming inputs (using stdin "|")
create panel of normals or similar for analyzing CNV in unpaired samples
pass fastq params as a list
incorporate clinvar sites in filtering
look at best practices for all tools
get MSI status running
	research mSINGS and MANTIS and try to standardize comparison
reintroduce variant_calling references (remove from variant_calling import *)
make parameter passing much simpler: pass two dicts: global and case specific
figure a way around hard-coded bam name in fpfilter
remake bed/interval/baseline files for MANTIS/mSINGS

#format outputs/inputs as dictionaries instead of lists - would make code much more sustainable
#max threads/processes management
#cleaner input/output file param passing
#clean up file hierarchy/names
#intuitive file structure for inputs (i.e. /project/case/normal/normal.fastq)
#utilize luigi.Target tmp file functionality (https://luigi.readthedocs.io/en/stable/api/luigi.local_target.html)
#incorporate luigi workers functionality?
#RGID in add read group - implement sample counter, or just use sample id
#add duplicates should be able to convert to bam and sort in one step
#maximize efficiency by limiting as many steps as possible to regions specified in exome .bed file
#make all command calls from separate fxn, incorporate threading
#add num requested cpus to docker command
#incorporate paired reads
#see if it's possible to share global_vars module across workers
# switch over to gatk4 where possible
# change --known variant file for indel realigner target creator


create docker containers with and without resource_bundle, for both os x and linux
	specify the default run command, and setup parameter passing
create linux and mac versions
go live on docker image/udocker
	allows active monitoring, but how to deal with concurrent instances?
		for now, just use different ports for each instance.
		launch luigid from python script - add port as a command line param
		If I want to get fancy, I could make a central server that controls all, and communicate with it to launch new analyses.